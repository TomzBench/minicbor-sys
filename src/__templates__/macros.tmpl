{%- macro rust_prelude(options) -%}
    {%- if options.language == "c" -%}
        pub use minicbor::encode::write::Cursor;
        pub use minicbor::{self, CborLen, Decode, Decoder, Encode, Encoder};

    {%- else -%}
        pub use minicbor::{self, CborLen, Encode, Decode};
        use serde::{Deserialize, Serialize};
        use serde_big_array::BigArray;
    {%- endif -%}
{%- endmacro -%}

{%- macro rust_struct_attr(options) -%}
    {%- if not options.language == "c" -%}
        #[derive(Clone, CborLen, Debug, Serialize, Deserialize, Encode, Decode)]
    {%- else -%}
        #[repr(C)]
        #[derive(Clone, CborLen, Encode, Decode)]
    {%- endif -%}
{%- endmacro -%}

{%- macro rust_struct(options, name, data) -%}
    pub struct {{ name | rename(case="struct", options=options)}} {
        {%- for member in data.members -%}
            {{ member | field_attr(index=loop.index0, language=options.language) }}
            {{ member | field(lang="rs", options=options)}},
        {%- endfor -%}
    }
{%- endmacro -%}

{%- macro rust_literal(options, name, data) -%}
    {{ data | literal(lang="rs", name=name, options=options) }}
{%- endmacro -%}

{%- macro rust_default_impl(options, name, data) -%}
    {%- set struct = name | rename(case="struct", options=options) -%}
    impl Default for {{ struct }} {
        fn default() -> {{ struct }} {
            {{ struct }} {
                {%- for member in data.members -%}
                    {{ member | field_default(options=options)}},
                {%- endfor -%}
            }
        }
    }
{%- endmacro -%}

{%- macro rust_ffi_impls(options, name, data) -%}
    {%- set cbor_key = "CborKey" | rename(case="enum", options=options) -%}
    {%- set key = name | rename(case="enum", options=options) -%}
    {%- set encode = name | rename(case="fn", verb="encode", options=options) -%}
    {%- set decode = name | rename(case="fn", verb="decode", options=options) -%}
    {%- set struct = name | rename(case="struct", options=options) -%}

    #[no_mangle]
    pub extern "C" fn {{encode}}(dst: *mut u8, dstlen: u32, src: &{{struct}}) -> i32 {
        mcbor_encode(dst, dstlen, {{cbor_key}}::{{key}}, src as *const {{struct}} as *const core::ffi::c_void)
    }

    #[no_mangle]
    pub extern "C" fn {{decode}}(dst: &mut {{struct}}, bytes: *const u8, len: u32) -> i32 {
        let slice = unsafe { core::slice::from_raw_parts(bytes, len as usize) };
        let mut decoder = Decoder::new(slice);
        if let Ok(t) = decoder.decode::<{{struct}}>() {
            *dst = t;
            decoder.position() as i32
        } else {
            -1
        }
    }
    
    #[no_mangle]
    pub extern "C" fn {{decode}}_w_errmsg(
        dst: &mut {{struct}},
        errmsg: Option<&mut u8>,
        errmsg_len: Option<&mut u32>,
        bytes: *const u8,
        len: u32,
    ) -> i32 {
        let slice = unsafe { core::slice::from_raw_parts(bytes, len as usize) };
        let mut decoder = Decoder::new(slice);
        match (decoder.decode::<{{struct}}>(), errmsg, errmsg_len) {
            (Err(e), Some(msg), Some(len)) => decode_error_msg(e, msg, len),
            (Err(_), _, _) => -1,
            (Ok(t), _, _) => {
                *dst = t;
                decoder.position() as i32
            }
        }
    }

{%- endmacro -%}

{%- macro match_encode(name, enc, options) -%}
    {%- set cbor_key = "CborKey" | rename(case="enum", options=options) -%}
    {%- set key = name | rename(case="enum", options=options) -%}
    {%- set struct = name | rename(case="struct", options=options) -%}
    {{cbor_key}}::{{key}} => {{enc}}.encode(&*(ptr as *const {{struct}}))
{%- endmacro -%}

{%- macro match_cbor_len(name, enc, options) -%}
    {%- set cbor_key = "CborKey" | rename(case="enum", options=options) -%}
    {%- set key = name | rename(case="enum", options=options) -%}
    {%- set struct = name | rename(case="struct", options=options) -%}
    {{cbor_key}}::{{key}} => <{{struct}} as CborLen<()>>::cbor_len(&*(ptr as *const {{struct}}), &mut ()) as u32
{%- endmacro -%}

{%- macro traits(options) -%}
    {%- if not options.language == "c" -%}
        pub trait Edit {
            fn edit(&mut self, bytes: &str);
        }
        
        impl Edit for [u8] {
            fn edit(&mut self, bytes: &str) {
                self[0..bytes.len()].copy_from_slice(bytes.as_bytes());
                self[bytes.len()..].fill(0);
            }
        }
        
        pub trait FromBytes {
            fn from_bytes(&self) -> core::result::Result<&str, core::str::Utf8Error>;
        }
        
        impl FromBytes for [u8] {
            fn from_bytes(&self) -> core::result::Result<&str, core::str::Utf8Error> {
                core::str::from_utf8(&self[0..]).map(|s| match s.find("\0") {
                    Some(n) => &s[0..n],
                    None => s,
                })
            }
        }
        
        struct StrToBytes<const N: usize> {}
        impl<'de, const N: usize> serde::de::Visitor<'de> for StrToBytes<N> {
            type Value = [u8; N];
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                write!(formatter, "a string")
            }
        
            fn visit_str<E>(self, s: &str) -> Result<Self::Value, E> {
                let mut ret: [u8; N] = [0; N];
                let min = if s.len() < N { s.len() } else { N };
                ret[0..min].copy_from_slice(&s.as_bytes()[0..min]);
                Ok(ret)
            }
        }
        
        fn ser_bytes_as_str<S: serde::Serializer>(ty: &[u8], s: S) -> std::result::Result<S::Ok, S::Error> {
            ty.from_bytes()
                .map_err(|e| serde::ser::Error::custom(format!("{}", e)))
                .and_then(|val| s.serialize_str(val))
        }
        
        fn de_str_as_bytes<'de, D, const N: usize>(de: D) -> std::result::Result<[u8; N], D::Error>
        where 
            D: serde::de::Deserializer<'de>,
        {
            de.deserialize_str(StrToBytes::<N> {})
        }
    {%- else -%}
        struct ErrMsg<'a>(&'a mut [u8]);
        impl<'a> core::fmt::Write for ErrMsg<'a> {
            fn write_str(&mut self, msg: &str) -> core::fmt::Result {
                let min = core::cmp::min(self.0.len() - 1, msg.len());
                self.0[0..min].copy_from_slice(&msg[0..min].as_bytes());
                self.0[min..].fill(0);
                Ok(())
            }
        }
        
        #[inline]
        #[allow(unused_must_use)]
        fn decode_error_msg(e: minicbor::decode::Error, errmsg: *mut u8, errmsg_len: &mut u32) -> i32 {
            let err = unsafe { core::slice::from_raw_parts_mut(errmsg, *errmsg_len as usize) };
            core::fmt::write(&mut ErrMsg(err), format_args!("{}", e));
            *errmsg_len = err.len() as u32;
            -1
        }
    {%- endif -%}
{%- endmacro -%}

{%- macro send_def(name) -%}
    {%- set key = name | rename(case="enum", options=options) -%}
    {%- set fn = name | rename(case="fn", verb="send", options=options) -%}
    {%- set struct = name | rename(case="struct", options=options) -%}

    static inline int
    {{fn}}(struct atx_api_request* req, struct {{struct}}* data)
    {
    	return atx_send_cbor(req, {{key}}, data);
    }
{%- endmacro -%}


