{%- import "macros.tmpl" as macros -%}
{{ macros::rust_prelude(options=options) }}

{%- for key, node in cddl | nodes(value="literal") -%}
    {{ macros::rust_literal(name=key, data=node.meta, options=options) }}
{%- endfor -%}

{%- for key, node in cddl | nodes(value="struct") -%}
    {{ macros::rust_struct_attr(options=options) }}
    {{ macros::rust_struct(name=key, data=node.meta, options=options) }}
    {%- if not options.language == "c" -%}
        {{ macros::rust_default_impl(name=key, data=node.meta, options=options) }}
    {%- endif -%}
{%- endfor -%}

{%- if options.language == "c" -%}
{%- set cbor_key = "CborKey" | rename(case="enum", options=options) -%}

#[repr(C)]
pub enum {{ "CborKey" | rename(case="enum", options=options) }} {
{%- for key, node in cddl | nodes(value="struct") -%}
    {{ key | rename(case="enum", options=options) }} = {{ loop.index0 }},
{%- endfor -%}
}

#[no_mangle]
pub extern "C" fn mcbor_encode(dst: *mut u8, dstlen: u32, key: {{cbor_key}}, ptr: *const core::ffi::c_void) -> i32 {
    let slice = unsafe { core::slice::from_raw_parts_mut(dst, dstlen as usize) };
    let mut enc = Encoder::new(Cursor::new(slice.as_mut()));
    unsafe {
        match key {
            {%- for key, node in cddl | nodes(value="struct") -%}
                {{ macros::match_encode(name=key, options=options) }},
            {%- endfor -%}
        }
        .map_or(-1, |enc| enc.writer().position() as i32)
    }
}

#[no_mangle]
pub extern "C" fn mcbor_len(key: {{cbor_key}}, ptr: *const core::ffi::c_void) -> u32 {
    unsafe {
        match key {
            {%- for key, node in cddl | nodes(value="struct") -%}
                {{ macros::match_cbor_len(name=key, options=options) }},
            {%- endfor -%}
        }
    }
}

{{ macros::define_enc_len(ty="i8") }}
{{ macros::define_enc_len(ty="u8") }}
{{ macros::define_enc_len(ty="i16") }}
{{ macros::define_enc_len(ty="u16") }}
{{ macros::define_enc_len(ty="i32") }}
{{ macros::define_enc_len(ty="u32") }}
{{ macros::define_enc_len(ty="i64") }}
{{ macros::define_enc_len(ty="u64") }}
{{ macros::define_enc_val(meth="i8", ty="i8") }}
{{ macros::define_enc_val(meth="u8", ty="u8") }}
{{ macros::define_enc_val(meth="i16", ty="i16") }}
{{ macros::define_enc_val(meth="u16", ty="u16") }}
{{ macros::define_enc_val(meth="i32", ty="i32") }}
{{ macros::define_enc_val(meth="u32", ty="u32") }}
{{ macros::define_enc_val(meth="i64", ty="i64") }}
{{ macros::define_enc_val(meth="u64", ty="u64") }}
{{ macros::define_enc_val(meth="simple", ty="u8") }}
{{ macros::define_enc_val(meth="bool", ty="bool") }}
{{ macros::define_enc_val(meth="char", ty="u8") }}
{{ macros::define_enc_val(meth="array", ty="u32") }}
{{ macros::define_enc_val(meth="map", ty="u32") }}
{{ macros::define_enc_typ(meth="null") }}
{{ macros::define_enc_typ(meth="undefined") }}
{{ macros::define_dec_typ(meth="i8", ty="i8") }}
{{ macros::define_dec_typ(meth="u8", ty="u8") }}
{{ macros::define_dec_typ(meth="i16", ty="i16") }}
{{ macros::define_dec_typ(meth="u16", ty="u16") }}
{{ macros::define_dec_typ(meth="i32", ty="i32") }}
{{ macros::define_dec_typ(meth="u32", ty="u32") }}
{{ macros::define_dec_typ(meth="i64", ty="i64") }}
{{ macros::define_dec_typ(meth="u64", ty="u64") }}
{{ macros::define_dec_typ(meth="null", ty="()") }}
{{ macros::define_dec_typ(meth="undefined", ty="()") }}
{{ macros::define_dec_typ(meth="simple", ty="u8") }}
{{ macros::define_dec_typ(meth="bool", ty="bool") }}
{{ macros::define_dec_typ(meth="char", ty="char") }}
{{ macros::define_dec_group(meth="map") }}
{{ macros::define_dec_group(meth="array") }}

{%- endif -%}

{{ macros::traits(options=options) }}

{%- for key, node in cddl -%}
    {%- if node.type == "struct" and options.language == "c" -%}
        {{ macros::rust_ffi_impls(name=key, data=node.meta, options=options) }}
    {%- endif -%}
{%- endfor -%}
